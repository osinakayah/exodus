/** Declaration file generated by dts-gen */

export = bitcoin_core;

declare class bitcoin_core {
    constructor(...args: any[]);

    abandonTransaction(...args: any[]): void;

    abortRescan(...args: any[]): void;

    addMultiSigAddress(...args: any[]): void;

    addNode(...args: any[]): void;

    addWitnessAddress(...args: any[]): void;

    analyzePsbt(...args: any[]): void;

    backupWallet(...args: any[]): void;

    bumpFee(...args: any[]): void;

    clearBanned(...args: any[]): void;

    combinePsbt(...args: any[]): void;

    combineRawTransaction(...args: any[]): void;

    command(...args: any[]): void;

    convertToPsbt(...args: any[]): void;

    createMultiSig(...args: any[]): void;

    createPsbt(...args: any[]): void;

    createRawTransaction(...args: any[]): void;

    createWallet(...args: any[]): void;

    createWitnessAddress(...args: any[]): void;

    decodePsbt(...args: any[]): void;

    decodeRawTransaction(...args: any[]): void;

    decodeScript(...args: any[]): void;

    deriveAddresses(...args: any[]): void;

    disconnectNode(...args: any[]): void;

    dumpPrivKey(...args: any[]): void;

    dumpWallet(...args: any[]): void;

    encryptWallet(...args: any[]): void;

    estimateFee(...args: any[]): void;

    estimatePriority(...args: any[]): void;

    estimateSmartFee(...args: any[]): void;

    estimateSmartPriority(...args: any[]): void;

    finalizePsbt(...args: any[]): void;

    fundRawTransaction(...args: any[]): void;

    generate(...args: any[]): void;

    generateToAddress(...args: any[]): void;

    getAccount(...args: any[]): void;

    getAccountAddress(...args: any[]): void;

    getAddedNodeInfo(...args: any[]): void;

    getAddressInfo(...args: any[]): void;

    getAddressesByAccount(...args: any[]): void;

    getAddressesByLabel(...args: any[]): void;

    getBalance(...args: any[]): void;

    getBestBlockHash(...args: any[]): void;

    getBlock(...args: any[]): void;

    getBlockByHash(...args: any[]): void;

    getBlockCount(...args: any[]): void;

    getBlockHash(...args: any[]): string;

    getBlockHeader(...args: any[]): void;

    getBlockHeadersByHash(...args: any[]): void;

    getBlockStats(...args: any[]): void;

    getBlockTemplate(...args: any[]): void;

    getBlockchainInfo(...args: any[]): void;

    getBlockchainInformation(...args: any[]): void;

    getChainTips(...args: any[]): void;

    getChainTxStats(...args: any[]): void;

    getConnectionCount(...args: any[]): number;

    getDescriptorInfo(...args: any[]): void;

    getDifficulty(...args: any[]): void;

    getGenerate(...args: any[]): void;

    getHashesPerSec(...args: any[]): void;

    getInfo(...args: any[]): void;

    getMemoryInfo(...args: any[]): void;

    getMemoryPoolContent(...args: any[]): void;

    getMemoryPoolInformation(...args: any[]): void;

    getMempoolAncestors(...args: any[]): void;

    getMempoolDescendants(...args: any[]): void;

    getMempoolEntry(...args: any[]): void;

    getMempoolInfo(...args: any[]): void;

    getMiningInfo(...args: any[]): void;

    getNetTotals(...args: any[]): void;

    getNetworkHashPs(...args: any[]): void;

    getNetworkInfo(...args: any[]): void;

    getNewAddress(...args: any[]): void;

    getNodeAddresses(...args: any[]): void;

    getPeerInfo(...args: any[]): void;

    getRawChangeAddress(...args: any[]): void;

    getRawMempool(...args: any[]): void;

    getRawTransaction(...args: any[]): any;

    getReceivedByAccount(...args: any[]): void;

    getReceivedByAddress(...args: any[]): void;

    getReceivedByLabel(...args: any[]): void;

    getRpcInfo(...args: any[]): void;

    getTransaction(...args: any[]): void;

    getTransactionByHash(...args: any[]): void;

    getTxOut(...args: any[]): void;

    getTxOutProof(...args: any[]): void;

    getTxOutSetInfo(...args: any[]): void;

    getUnconfirmedBalance(...args: any[]): void;

    getUnspentTransactionOutputs(...args: any[]): void;

    getWalletInfo(...args: any[]): void;

    getWork(...args: any[]): void;

    getZmqNotifications(...args: any[]): void;

    help(...args: any[]): void;

    importAddress(...args: any[]): void;

    importMulti(...args: any[]): void;

    importPrivKey(...args: any[]): void;

    importPrunedFunds(...args: any[]): void;

    importPubKey(...args: any[]): void;

    importWallet(...args: any[]): void;

    joinPsbts(...args: any[]): void;

    keypoolRefill(...args: any[]): void;

    listAccounts(...args: any[]): void;

    listAddressGroupings(...args: any[]): void;

    listBanned(...args: any[]): void;

    listLabels(...args: any[]): void;

    listLockUnspent(...args: any[]): void;

    listReceivedByAccount(...args: any[]): void;

    listReceivedByAddress(...args: any[]): void;

    listReceivedByLabel(...args: any[]): void;

    listSinceBlock(...args: any[]): void;

    listTransactions(...args: any[]): void;

    listUnspent(...args: any[]): void;

    listWalletDir(...args: any[]): void;

    listWallets(...args: any[]): void;

    loadWallet(...args: any[]): void;

    lockUnspent(...args: any[]): void;

    logging(...args: any[]): void;

    move(...args: any[]): void;

    ping(...args: any[]): void;

    preciousBlock(...args: any[]): void;

    prioritiseTransaction(...args: any[]): void;

    pruneBlockchain(...args: any[]): void;

    removePrunedFunds(...args: any[]): void;

    rescanBlockchain(...args: any[]): void;

    saveMempool(...args: any[]): void;

    scantxoutset(...args: any[]): void;

    sendFrom(...args: any[]): void;

    sendMany(...args: any[]): void;

    sendRawTransaction(...args: any[]): void;

    sendToAddress(...args: any[]): void;

    setAccount(...args: any[]): void;

    setBan(...args: any[]): void;

    setGenerate(...args: any[]): void;

    setHdSeed(...args: any[]): void;

    setLabel(...args: any[]): void;

    setNetworkActive(...args: any[]): void;

    setTxFee(...args: any[]): void;

    signMessage(...args: any[]): void;

    signMessageWithPrivKey(...args: any[]): void;

    signRawTransaction(...args: any[]): void;

    signRawTransactionWithKey(...args: any[]): void;

    signRawTransactionWithWallet(...args: any[]): void;

    stop(...args: any[]): void;

    submitBlock(...args: any[]): void;

    testMempoolAccept(...args: any[]): void;

    unloadWallet(...args: any[]): void;

    upTime(...args: any[]): void;

    utxoUpdatePsbt(...args: any[]): void;

    validateAddress(...args: any[]): void;

    verifyChain(...args: any[]): void;

    verifyMessage(...args: any[]): void;

    verifyTxOutProof(...args: any[]): void;

    walletCreateFundedPsbt(...args: any[]): void;

    walletLock(...args: any[]): void;

    walletPassphrase(...args: any[]): void;

    walletPassphraseChange(...args: any[]): void;

    walletProcessPsbt(...args: any[]): void;

}

